{"version":3,"sources":["CartContext.js","components/item.js","components/storesData.js","components/storeList.js","pages/BoughtItems.js","components/storeListRecieved.js","pages/ReceivedItems.js","components/availavleItems.js","App.js","serviceWorker.js","index.js"],"names":["CartContext","React","createContext","CartProvider","props","useEffect","fetchData","a","fetch","then","response","json","data","setRates","rates","catch","error","alert","console","log","setTimeout","RATES_FETCH_TIMEOUT","useState","items","availableItems","setAvailableItems","cart","setCart","received","setReceived","store","availableItemsStore","cartStore","receivedStore","ratesStore","Provider","value","children","Item","useContext","conversion","price","ILS","toFixed","className","name","currency","est","StoresData","sum","StoreList","Set","map","item","storeItems","filter","reduce","acc","key","BoughtItems","activeClassName","to","path","length","sort","b","Date","id","type","onClick","newItem","curr","itemToREmove","addToReceived","StoreListRecieved","ReceivedItems","AvailableItems","currItem","addToCart","App","basename","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1ef59eac.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport items from './items.json';\r\nimport { RATES_FETCH_TIMEOUT } from './config.json';\r\n\r\nexport const CartContext = React.createContext(null);\r\n\r\nexport const CartProvider = (props) => {\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            await fetch('https://api.exchangeratesapi.io/latest?base=USD&symbols=ILS')\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    setRates(data.rates);\r\n                })\r\n                .catch(error => {\r\n                    alert('rates are not availabe')\r\n                    console.log(error);\r\n                })\r\n\r\n            setTimeout(() => {\r\n                fetchData();\r\n            }, RATES_FETCH_TIMEOUT);\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    const [availableItems, setAvailableItems] = useState(items);\r\n    const [cart, setCart] = useState([]);\r\n    const [received, setReceived] = useState([]);\r\n    const [rates, setRates] = useState(null);\r\n\r\n    const store = {\r\n        availableItemsStore: { availableItems, setAvailableItems },\r\n        cartStore: { cart, setCart },\r\n        receivedStore: { received, setReceived },\r\n        ratesStore: { rates, setRates }\r\n    };\r\n\r\n    return <CartContext.Provider value={store}>\r\n        {props.children}\r\n    </CartContext.Provider>\r\n}","import React, { useContext } from 'react';\r\nimport { CartContext } from '../CartContext';\r\n\r\nexport const Item = (props) => {\r\n\r\n    const { ratesStore } = useContext(CartContext);\r\n    const { rates } = ratesStore;\r\n\r\n    let conversion = \"\";\r\n\r\n    if (rates) {\r\n        conversion = (props.price * rates.ILS).toFixed(2) + \" ILS\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"item\">\r\n            <div><b>Item Name:</b> {props.name}</div>\r\n            <div><b>Store Name:</b> {props.store}</div>\r\n            <div><b>Price:</b> {props.price} ({props.currency} Only) {conversion && <span>/ {conversion}</span>}</div>\r\n            <div><b>Delivery EST Date:</b> {props.est}</div>\r\n        </div>\r\n    );\r\n}","import React, { useContext } from 'react';\r\nimport { CartContext } from '../CartContext';\r\n\r\nexport const StoresData = (props) => {\r\n\r\n    const { ratesStore } = useContext(CartContext);\r\n    const { rates } = ratesStore;\r\n\r\n    return (\r\n        <div className=\"single-item\">\r\n            <b>{props.name}</b>: {props.sum} {props.currency}{rates && <span> / {(props.sum * rates.ILS).toFixed(2)} ILS</span>}\r\n        </div>\r\n    );\r\n}","import React, { useContext } from 'react';\r\nimport { CartContext } from '../CartContext';\r\nimport { StoresData } from './storesData';\r\n\r\nexport const StoreList = () => {\r\n\r\n    const { cartStore } = useContext(CartContext);\r\n    const { cart } = cartStore;\r\n\r\n    const stores = [...new Set(cart.map(item => item.store))];\r\n    const storesData = stores.map(store => {\r\n        const storeItems = cart.filter(item => item.store === store);\r\n        const sum = storeItems.reduce((acc, item) => {\r\n            return acc + item.price\r\n        }, 0);\r\n        const currency = storeItems[0].currency;\r\n        return { name: store, sum, currency };\r\n    });\r\n\r\n    return (\r\n        storesData.map((store, key) =>\r\n            <StoresData {...store} key={key} />\r\n        )\r\n    );\r\n}","import React, { useContext } from 'react';\r\nimport { HashRouter, Switch, Route, NavLink } from \"react-router-dom\";\r\nimport { CartContext } from '../CartContext';\r\nimport { Item } from '../components/item';\r\nimport { StoreList } from '../components/storeList';\r\n\r\nexport const BoughtItems = () => {\r\n\r\n    const { receivedStore, cartStore } = useContext(CartContext);\r\n    const { cart, setCart } = cartStore;\r\n    const { setReceived } = receivedStore;\r\n\r\n    const addToReceived = (item) => {\r\n\r\n        const newItem = {\r\n            name: item.name,\r\n            price: item.price,\r\n            currency: item.currency,\r\n            store: item.store,\r\n            est: item.est,\r\n            id: item.id\r\n        };\r\n\r\n        setCart(curr => curr.filter(itemToREmove => itemToREmove.id !== item.id));\r\n        setReceived(curr => [...curr, newItem]);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Bought Items</h3>\r\n            <HashRouter>\r\n                <div>\r\n                    <nav>\r\n                        <ul>\r\n                            <li>\r\n                                <NavLink activeClassName=\"active\" to=\"/list/items\">Items</NavLink>\r\n                            </li>\r\n                            <li>\r\n                                <NavLink activeClassName=\"active\" to=\"/list/stores\">Stores</NavLink>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                    <Switch>\r\n                        <Route path=\"/list/items\">\r\n                            {cart.length > 0 &&\r\n                                <ul>\r\n                                    {cart.sort((a, b) => {\r\n                                        return new Date(a.est) - new Date(b.est);\r\n                                    })\r\n                                        .map(item =>\r\n                                            <div className=\"single-item\" key={item.id}>\r\n                                                <Item {...item} />\r\n                                                <button type=\"button\" onClick={() => addToReceived(item)}>Received</button>\r\n                                            </div>\r\n                                        )}\r\n                                </ul>\r\n                            }\r\n                        </Route>\r\n                        <Route path=\"/list/stores\">\r\n                            <StoreList />\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}","import React, { useContext } from 'react';\r\nimport { CartContext } from '../CartContext';\r\nimport { StoresData } from './storesData';\r\n\r\nexport const StoreListRecieved = () => {\r\n\r\n    const { receivedStore } = useContext(CartContext);\r\n    const { received } = receivedStore;\r\n\r\n    const stores = [...new Set(received.map(item => item.store))];\r\n    const storesData = stores.map(store => {\r\n        const storeItems = received.filter(item => item.store === store);\r\n        const sum = storeItems.reduce((acc, item) => {\r\n            return acc + item.price\r\n        }, 0);\r\n        const currency = storeItems[0].currency;\r\n        return { name: store, sum, currency };\r\n    });\r\n\r\n    return (\r\n        storesData.map((store, key) =>\r\n            <StoresData {...store} key={key} />\r\n        )\r\n    );\r\n}","import React, { useContext } from 'react';\r\nimport { HashRouter, Switch, Route, NavLink } from \"react-router-dom\";\r\nimport { CartContext } from '../CartContext';\r\nimport { Item } from '../components/item'\r\nimport { StoreListRecieved } from '../components/storeListRecieved';\r\n\r\nexport const ReceivedItems = () => {\r\n\r\n    const { receivedStore } = useContext(CartContext);\r\n    const { received } = receivedStore;\r\n\r\n    return (\r\n        <div>\r\n            <h3>Received Items</h3>\r\n            <HashRouter>\r\n                <div>\r\n                    <nav>\r\n                        <ul>\r\n                            <li>\r\n                                <NavLink activeClassName=\"active\" to=\"/received/items\">Items</NavLink>\r\n                            </li>\r\n                            <li>\r\n                                <NavLink activeClassName=\"active\" to=\"/received/stores\">Stores</NavLink>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                    <Switch>\r\n                        <Route path=\"/received/items\">\r\n                            {received.length > 0 &&\r\n                                <ul>\r\n                                    {received.map(item =>\r\n                                        <div className=\"single-item\" key={item.id}>\r\n                                            <Item {...item} />\r\n                                        </div>\r\n                                    )}\r\n                                </ul>\r\n                            }\r\n                        </Route>\r\n                        <Route path=\"/received/stores\">\r\n                            <StoreListRecieved />\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}","import React, { useContext } from 'react';\r\nimport { Item } from './item';\r\nimport { CartContext } from '../CartContext';\r\n\r\nexport const AvailableItems = () => {\r\n\r\n    const { availableItemsStore, cartStore } = useContext(CartContext);\r\n    const { setCart } = cartStore;\r\n    const { availableItems, setAvailableItems } = availableItemsStore;\r\n\r\n    const addToCart = (item) => {\r\n\r\n        const newItem = {\r\n            name: item.name,\r\n            price: item.price,\r\n            currency: item.currency,\r\n            store: item.store,\r\n            est: item.est,\r\n            id: item.id\r\n        };\r\n\r\n        setCart(curr => [...curr, newItem]);\r\n        setAvailableItems(curr => curr.filter(currItem => currItem.id !== item.id));\r\n    }\r\n\r\n    return (\r\n        availableItems.length > 0 &&\r\n        <div>\r\n            <h3>Available Items</h3>\r\n            {availableItems.map(item => {\r\n                return (\r\n                    <div className=\"single-item\" key={item.id}>\r\n                        <Item {...item} />\r\n                        <button type=\"button\" onClick={() => addToCart(item)}>add to cart</button>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport { HashRouter, Switch, Route, NavLink } from \"react-router-dom\";\nimport { BoughtItems } from './pages/BoughtItems';\nimport { ReceivedItems } from './pages/ReceivedItems';\nimport { CartProvider } from './CartContext';\nimport { AvailableItems } from './components/availavleItems';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <CartProvider>\n      <div className=\"container\">\n        <HashRouter basename='/'>\n          <div>\n            <nav>\n              <ul>\n                <li>\n                  <NavLink to=\"/availableItems\">Available Items</NavLink>\n                </li>\n                <li>\n                  <NavLink to=\"/list/items\">List</NavLink>\n                </li>\n                <li>\n                  <NavLink to=\"/received/items\">Received</NavLink>\n                </li>\n              </ul>\n            </nav>\n            <Switch>\n              <Route path=\"/list\">\n                <BoughtItems />\n              </Route>\n              <Route path=\"/received\">\n                <ReceivedItems />\n              </Route>\n              <Route path=\"/availableItems\">\n                <AvailableItems />\n              </Route>\n            </Switch>\n          </div>\n        </HashRouter>\n      </div>\n    </CartProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}